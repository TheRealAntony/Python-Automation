name: Cross-Platform CI/CD

on:
  # pull_request:
  #   branches: [ "*" ]
  # push:
  #   branches: [ "*" ] 
  workflow_dispatch:
    inputs:
      os:
        description: 'Select OS to build on'
        required: true
        default: 'all'
        type: choice
        options:
          - linux
          - windows
          - macos
          - all

      push_to_s3:
        description: 'Push to S3?'
        required: true
        default: 'false'
        type: choice
        options:
          - true
          - false

      deploy:
        description: 'Deploy to production?'
        required: true
        default: 'false'
        type: choice
        options:
          - true
          - false     

# --- build trigger jobs ---
jobs:
  select-os:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.set.outputs.os }}
      push_to_s3: ${{ steps.set.outputs.push_to_s3 }}
      deploy: ${{ steps.set.outputs.deploy }}
    steps:
      - id: set
        run: |
          echo "os=${{ github.event.inputs.os }}" >> $GITHUB_OUTPUT
          echo "push_to_s3=${{ github.event.inputs.push_to_s3 }}" >> $GITHUB_OUTPUT
          echo "Selected OS: ${{ github.event.inputs.os }}"
          echo "Push to S3: ${{ github.event.inputs.push_to_s3 }}"
          echo "deploy=${{ github.event.inputs.deploy }}" >> $GITHUB_OUTPUT
          echo "Deploy: ${{ github.event.inputs.deploy }}"
          echo "Inputs set successfully."
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Linux Build
        id: build
        run: |
          echo "🏗️ Validating the code"
          sleep 1
          echo "✅ Validate completed"
      - run: echo "build_complete=true" >> $GITHUB_OUTPUT

  build-linux:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'linux' || needs.select-os.outputs.os == 'all') }}
    needs: [validate, select-os]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Linux Build
        id: build
        run: |
          echo "🏗️ Building on Linux"
          sleep 1
          echo "✅ Linux build complete"
      - run: echo "build_complete=true" >> $GITHUB_OUTPUT

  build-windows:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'windows' || needs.select-os.outputs.os == 'all') }}
    needs: [validate, select-os]
    runs-on: windows-latest
    outputs:
      build_complete: ${{ steps.build.outputs.build_complete }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Windows Build
        shell: pwsh
        run: |
          # Script to Install Development Tools Using Chocolatey
          # This script installs Git, Node.js, Yara, Make, and Wails 3.
          # Ensure the script is executed with Administrator privileges.
          
          # Check if Chocolatey is installed
          if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
              Write-Host "Chocolatey is not installed. Proceeding with installation..."
              if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
                  Write-Host "This script must be run as an Administrator. Please restart the script with elevated privileges."
                  exit 1
              }
              Set-ExecutionPolicy Bypass -Scope Process -Force
              [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
              Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
              Write-Host "Chocolatey installation completed."
          } else {
              Write-Host "Chocolatey is already installed."
          }
          
          # Install Git if not installed
          if (!(Get-Command git -ErrorAction SilentlyContinue)) {
              Write-Host "Installing Git..."
              choco install git -y --ignore-detected-reboot
              Write-Host "Verifying Git installation..."
              git --version
          } else {
              Write-Host "Git is already installed."
          }
          
          # Install Node.js and npm if not installed
          if (!(Get-Command node -ErrorAction SilentlyContinue)) {
              Write-Host "Installing Node.js and npm..."
              choco install nodejs.install -y --ignore-detected-reboot
              Write-Host "Verifying Node.js installation..."
              node --version
              Write-Host "Verifying npm installation..."
              npm --version
          } else {
              Write-Host "Node.js and npm are already installed."
          }
          
          # Install Yara if not installed
          if (!(Get-Command yara -ErrorAction SilentlyContinue)) {
              Write-Host "Installing Yara..."
              choco install yara -y --ignore-detected-reboot
              Write-Host "Refreshing environment variables..."
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path", [System.EnvironmentVariableTarget]::Machine)
              Write-Host "Verifying Yara installation..."
              $yaraPath = (Get-Command yara -ErrorAction SilentlyContinue).Source
              if ($yaraPath) {
                  & $yaraPath --version
              } else {
                  Write-Host "Yara executable not found in the system path."
              }
          } else {
              Write-Host "Yara is already installed."
          }
          
          # Install Make if not installed
          if (!(Get-Command make -ErrorAction SilentlyContinue)) {
              Write-Host "Installing Make..."
              choco install make -y --ignore-detected-reboot
              Write-Host "Verifying Make installation..."
              make --version
          } else {
              Write-Host "Make is already installed."
          }
          
          # Install Go if not installed
          if (!(Get-Command go -ErrorAction SilentlyContinue)) {
              Write-Host "Installing Go..."
              choco install golang -y --ignore-detected-reboot
              Write-Host "Verifying Go installation..."
              go version
          } else {
              Write-Host "Go is already installed."
          }
          
          # Install Wails 3 using Go
          Write-Host "Installing Wails 3 using Go..."
          go install -v github.com/wailsapp/wails/v3/cmd/wails3@latest
          Write-Host "Refreshing environment variables..."
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path", [System.EnvironmentVariableTarget]::Machine)
          
          # Add Go binary path to environment variables
          Write-Host "Adding Go binary path to environment variables..."
          $goPath = "$($env:USERPROFILE)\go\bin"
          if (-not ($env:Path -split ';' | ForEach-Object { $_.Trim() } | Where-Object { $_ -eq $goPath })) {
              if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
                  Write-Host "This script must be run as an Administrator to modify system environment variables."
                  exit 1
              }
              [System.Environment]::SetEnvironmentVariable("Path", "$($env:Path);$goPath", [System.EnvironmentVariableTarget]::Machine)
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path", [System.EnvironmentVariableTarget]::Machine)
              Write-Host "Go binary path added to environment variables."
          } else {
              Write-Host "Go binary path is already in environment variables."
          }
          
          # Verify Wails 3 installation
          Write-Host "Verifying Wails 3 installation..."
          $wails3Path = (Get-Command wails3 -ErrorAction SilentlyContinue).Source
          if ($wails3Path) {
              Write-Host "Wails 3 is installed at: $wails3Path"
              Write-Host "Running 'wails3 doctor'..."
              & $wails3Path doctor
              # Write-Host "Running 'wails3 build'..."
              # & $wails3Path build
          } else {
              Write-Host "Wails 3 executable not found in the system path. Please ensure Go binaries are in your PATH."
          }

  

  build-macos:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'macos' || needs.select-os.outputs.os == 'all') }}
    needs: [validate, select-os]
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate macOS Build
        id: build
        run: |
          echo "🏗️ Building on macOS"
          sleep 1
          echo "✅ macOS build complete"
      - run: echo "build_complete=true" >> $GITHUB_OUTPUT
          

# --- Push to 'linux' branch job ---
  push-s3-linux:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'linux' || needs.select-os.outputs.os == 'all') && needs.select-os.outputs.push_to_s3 == 'true' }}
    needs: [select-os, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Push to S3 - Linux
        run: |
          echo "📦 Pushing to S3..."
          sleep 1
          echo "✅ Pushed to S3 successfully"

  push-s3-windows:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'windows' || needs.select-os.outputs.os == 'all') && needs.select-os.outputs.push_to_s3 == 'true' }}
    needs: [select-os, build-windows]
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Push to S3 - Windows
        run: |
          echo "📦 Pushing to S3..."
          echo "✅ Pushed to S3 successfully"

  push-s3-mac:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'macos' || needs.select-os.outputs.os == 'all') && needs.select-os.outputs.push_to_s3 == 'true' }}
    needs: [select-os, build-macos]
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Push to S3 - macOS
        run: |
          echo "📦 Pushing to S3..."
          sleep 1
          echo "✅ Pushed to S3 successfully"

  deploy_to_linux:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'linux' || needs.select-os.outputs.os == 'all') && needs.select-os.outputs.deploy == 'true' }}
    needs: [select-os, build-linux, push-s3-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Deploy to Production - Linux
        run: |
          echo "🚀 Deploying to production..."
          sleep 1
          echo "✅ Deployed to production successfully"

  deploy_to_windows:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'windows' || needs.select-os.outputs.os == 'all') && needs.select-os.outputs.deploy == 'true' }}
    needs: [select-os, build-windows, push-s3-windows]
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Deploy to Production - Windows
        run: |
          echo "🚀 Deploying to production..."
          echo "✅ Deployed to production successfully"

  deploy_to_mac:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'macos' || needs.select-os.outputs.os == 'all') && needs.select-os.outputs.deploy == 'true' }}
    needs: [select-os, build-macos, push-s3-mac]
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Deploy to Production - macOS
        run: |
          echo "🚀 Deploying to production..."
          sleep 1
          echo "✅ Deployed to production successfully"                
