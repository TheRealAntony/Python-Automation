name: Cross-Platform CI/CD

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Select OS to build on'
        required: true
        default: 'all'
        type: choice
        options:
          - linux
          - windows
          - macos
          - all

      push_to_s3:
        description: 'Push to S3?'
        required: true
        default: 'false'
        type: choice
        options:
          - true
          - false

      deploy:
        description: 'Deploy to production?'
        required: true
        default: 'false'
        type: choice
        options:
          - true
          - false     

# --- build trigger jobs ---
jobs:
  select-os:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.set.outputs.os }}
      push_to_s3: ${{ steps.set.outputs.push_to_s3 }}
      deploy: ${{ steps.set.outputs.deploy }}
    steps:
      - id: set
        run: |
          echo "os=${{ github.event.inputs.os }}" >> $GITHUB_OUTPUT
          echo "push_to_s3=${{ github.event.inputs.push_to_s3 }}" >> $GITHUB_OUTPUT
          echo "Selected OS: ${{ github.event.inputs.os }}"
          echo "Push to S3: ${{ github.event.inputs.push_to_s3 }}"
          echo "deploy=${{ github.event.inputs.deploy }}" >> $GITHUB_OUTPUT
          echo "Deploy: ${{ github.event.inputs.deploy }}"
          echo "Inputs set successfully."

  build-linux:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'linux' || needs.select-os.outputs.os == 'all') }}
    needs: [select-os]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Linux Build
        id: build
        run: |
          echo "🏗️ Building on Linux"
          sleep 1
          echo "✅ Linux build complete"
      - run: echo "build_complete=true" >> $GITHUB_OUTPUT

  build-windows:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'windows' || needs.select-os.outputs.os == 'all') }}
    needs: [select-os]
    runs-on: windows-latest
    outputs:
      build_complete: ${{ steps.build.outputs.build_complete }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Windows Build
        id: build
        run: |
          echo "🏗️ Building on Windows"
          echo "build_complete=true" >> $GITHUB_OUTPUT
          echo "✅ Windows build complete"

  build-macos:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'macos' || needs.select-os.outputs.os == 'all') }}
    needs: [select-os]
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate macOS Build
        id: build
        run: |
          echo "🏗️ Building on macOS"
          sleep 1
          echo "✅ macOS build complete"
      - run: echo "build_complete=true" >> $GITHUB_OUTPUT
          

# --- Push to 'linux' branch job ---
  push-s3-linux:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'linux' || needs.select-os.outputs.os == 'all') && needs.select-os.outputs.push_to_s3 == 'true' }}
    needs: [select-os, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Push to S3 - Linux
        run: |
          echo "📦 Pushing to S3..."
          sleep 1
          echo "✅ Pushed to S3 successfully"

  push-s3-windows:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'windows' || needs.select-os.outputs.os == 'all') && needs.select-os.outputs.push_to_s3 == 'true' }}
    needs: [select-os, build-windows]
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Push to S3 - Windows
        run: |
          echo "📦 Pushing to S3..."
          echo "✅ Pushed to S3 successfully"

  push-s3-mac:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'macos' || needs.select-os.outputs.os == 'all') && needs.select-os.outputs.push_to_s3 == 'true' }}
    needs: [select-os, build-macos]
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Push to S3 - macOS
        run: |
          echo "📦 Pushing to S3..."
          sleep 1
          echo "✅ Pushed to S3 successfully"

  deploy_to_linux:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'linux' || needs.select-os.outputs.os == 'all') && needs.select-os.outputs.deploy == 'true' }}
    needs: [select-os, build-linux, push-s3-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Request Approval
        uses: hmarr/auto-approve-action@v2
      - name: Simulate Deploy to Production - Linux
        run: |
          echo "🚀 Deploying to production..."
          sleep 1
          echo "✅ Deployed to production successfully"

  deploy_to_windows:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'windows' || needs.select-os.outputs.os == 'all') && needs.select-os.outputs.deploy == 'true' }}
    needs: [select-os, build-windows, push-s3-windows]
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Deploy to Production - Windows
        run: |
          echo "🚀 Deploying to production..."
          echo "✅ Deployed to production successfully"

  deploy_to_mac:
    if: ${{ github.event_name == 'workflow_dispatch' && (needs.select-os.outputs.os == 'macos' || needs.select-os.outputs.os == 'all') && needs.select-os.outputs.deploy == 'true' }}
    needs: [select-os, build-macos, push-s3-mac]
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Simulate Deploy to Production - macOS
        run: |
          echo "🚀 Deploying to production..."
          sleep 1
          echo "✅ Deployed to production successfully"                
